#encoding: UTF-8

wb = xlsx_package.workbook
xlsx_package.use_shared_strings = true
wrap = xlsx_package.workbook.styles.add_style alignment: {wrap_text: true}
unknown = []

wb.add_worksheet(name: 'Toutes les offres') do |sheet|
  sheet.add_row exported_columns.values.flatten.map {|v| I18n.t("export.program_item.#{v}")}
  @items.to_a.sort_by {|i| i.main_town_insee_code}.each do |item|
    sheet.add_row exported_values(item), style: wrap
  end
  sheet.column_widths *cols_width
end
if current_moderator.member_ref == ISERE
  sheets = {}
  all_insee_codes = TERRITORIES[ISERE].values.flatten.uniq
  TERRITORIES[ISERE].keys.each do |t|
    sheets[t] = wb.add_worksheet(name: t)
    sheets[t].add_row exported_columns.values.flatten.map {|v| I18n.t("export.program_item.#{v}")}
  end
  @items.each do |item|
    if all_insee_codes.include?(item.main_town_insee_code)
      TERRITORIES[ISERE].each_pair do |t, insee_codes|
        if insee_codes.include?(item.main_town_insee_code)
          sheets[t].add_row exported_values(item), style: wrap
        end
      end
    else
      unknown << item
    end
  end
end

unless unknown.empty?
  wb.add_worksheet(name: 'Inconnu') do |sheet|
    sheet.add_row exported_columns.values.flatten.map {|v| I18n.t("export.program_item.#{v}")}
    unknown.each do |item|
      sheet.add_row exported_values(item), style: wrap
    end
  end
end
