<script>
    var selectTown = $("select.select_town").select2({
        language: "fr",
        minimumInputLength: 2,
        ajax: {
            url: "<%= towns_user_account_path %>",
            delay: 500,
            data: function (params) {
                var query = {
                    pattern: encodeURIComponent(params.term),
                    page: params.page
                };
                return query;
            },
            processResults: function (data) {
                return {
                    results: data.towns
                };
            }
        }
    });

    function setTownValue(value, label) {
        $("select.select_town").append('<option value="' + value + '">' + label + '</option>');
        selectTown.val(value).trigger('change');
    }

    <% if current_moderator && (@item.draft? || @item.pending?) %>
      var selectUser = $("select.select_user").select2({
          language: "fr",
          minimumInputLength: 2,
          ajax: {
              url: "<%= search_user_account_path %>",
              delay: 500,
              data: function (params) {
                  var query = {
                      pattern: encodeURIComponent(params.term),
                      page: params.page
                  };
                  return query;
              },
              processResults: function (data) {
                  return {
                      results: data.users
                  };
              }
          }
      });
      selectUser.on('select2:select', function (e) {
          var data = e.params.data;
          var editLink = $("#edit_program_item_legal_entity");
          if (editLink.size()) {
              $("#program_item_legal_entity_name").val(data.legal_entity);
              editLink.attr("href", editLink.attr("href").replace(/comptes\/(\d+)/, 'comptes/' + data.id));
          }
          $("#program_item_telephone").val(data.telephone);
          $("#program_item_email").val(data.email);
          $("#program_item_website").val(data.website);
          $("#entity_items_info").remove();
      });
      function setUserValue(value, label) {
          $("select.select_user").append('<option value="' + value + '">' + label + '</option>');
          selectUser.val(value).trigger('change');
      }
    <% end %>

    function updateFormFields(feature) {
        $("#program_item_main_place").val(feature.properties.name);
        $("#program_item_main_address").val([feature.properties.housenumber, feature.properties.street].join(' ').trim());
        var postalCodeId = (feature.properties.postalcode_gid && feature.properties.postalcode_gid.split(':').length === 3) ? feature.properties.postalcode_gid.split(':')[2] : null;
        if(postalCodeId) {
          setTownValue(postalCodeId, feature.properties.locality);
        }
        $("#program_item_main_lat").val(feature.geometry.coordinates[1]);
        $("#program_item_main_lng").val(feature.geometry.coordinates[0]);
    }

    function updateMarker(map, lat, lng) {
        var prevLayers = [];
        map.eachLayer(function(layer) {
            if(layer.options.draggable) {
                prevLayers.push(layer);
            }
        });
        for(var i = 0; i < prevLayers.length; i++) {
            map.removeLayer(prevLayers[i]);
        }
        var marker = L.marker([lat, lng], {draggable: true});
        marker.addTo(map);
        map.setView([lat, lng], 15);
        bindDragToLatLng(marker);
    }

    // function checkPosition(lat, lng) {
    //     var validPosition = true;
    //     try {
    //         var posLat = parseFloat(lat), posLng = parseFloat(lng);
    //         console.log('posLat : ' + posLat + ' - posLng : ' + posLng);
    //         var minPos = {lng: 4.075927734375, lat: 44.21764696919354},
    //             maxPos = {lng: 7.223510742187499, lat: 46.63057868059483};
    //
    //         if (posLat < minPos.lat || posLng < minPos.lng || posLat > maxPos.lat || posLng > maxPos.lng) {
    //             validPosition = false;
    //         }
    //     } catch (e) {
    //         console.error('Invalid coordinates : ' + lat + ' - ' + lng);
    //         validPosition = false;
    //     }
    //     if (!validPosition) {
    //         $('#program_item_main_lat').addClass('error');
    //         $('#program_item_main_lng').addClass('error');
    //     }
    // }

    function setStatus(status) {
        $('#program_item_status').val(status);
        $('#program_item_author').val('<%= current_user ? current_user.full_name : current_moderator.full_name %>');
    }

    function bindDragToLatLng(marker) {
        marker.on('dragend', function(e) {
            var newLatLng = e.target._latlng;
            $("#program_item_main_lat").val(newLatLng.lat);
            $("#program_item_main_lat").removeClass("error");
            $("#program_item_main_lng").val(newLatLng.lng);
            $("#program_item_main_lng").removeClass("error");
        });
    }

    var mapCenter = [45.740410, 4.816417];
    <% if territory?(ISERE) %>
      mapCenter = [45.1864, 5.736474];
    <% elsif territory?(SAUMUR) %>
      mapCenter = [47.2568107, -0.3074895];
    <% end %>

    function initMap(container, zoom, minZoom) {
        var map = L.map(container, {zoomControl: false, zoom: zoom, minZoom: minZoom, scrollWheelZoom: false}).setView(mapCenter);
        new L.Control.Zoom({ position: 'bottomleft' }).addTo(map);
        L.tileLayer('https://api.mapbox.com/v4/mapbox.streets/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiamVhbmJhcHRpc3RldmlsYWluIiwiYSI6ImZiMTJmMDdjODI5NDRiYTcyMDgzNGJmOTA5NjU0NDg1In0.b6l-11X_ZtS_83CsFu-v9Q', {
            attribution: '&copy; Mapbox &copy; OpenStreetMap',
            detectRetina: true
        }).addTo(map);

        <% unless readonly %>
        var geocoderOptions = {
            url: 'https://places.apidae.net',
            layers: ['venue', 'address', 'street'],
            position: 'topleft',
            expanded: true,
            overrideBbox: true,
            fullWidth: false,
            markers: {draggable: true},
            textStrings: {
                INPUT_PLACEHOLDER: "Saisir le nom du lieu ou son adresse",
                INPUT_TITLE_ATTRIBUTE: 'Rechercher',
                RESET_TITLE_ATTRIBUTE: 'Réinitialiser',
                NO_RESULTS: 'Aucun résultat',
                ERROR_403: 'Autorisation requise',
                ERROR_404: 'Le service de recherche est temporairement indisponible',
                ERROR_408: 'Le service de recherche est temporairement indisponible',
                ERROR_429: 'Le service de recherche est temporairement indisponible',
                ERROR_500: 'Le service de recherche est temporairement indisponible',
                ERROR_502: 'Le service de recherche est temporairement indisponible',
                ERROR_DEFAULT: 'Le service de recherche est temporairement indisponible'
            }
        };
        var geocoder = L.control.geocoder('mapzen-NY5Wumy', geocoderOptions);

        function toggleMapFields(newPlace) {
            $("#map_fields").show();
            if(newPlace) {
                updateFormFields({properties:{}, geometry:{coordinates:[mapCenter[1], mapCenter[0]]}});
                $("#program_item_main_transports").val('');
                $("#program_item_main_town_insee_code").val('').trigger('change');
                $("#program_item_building_types").val('').trigger("chosen:updated");
                $("#program_item_building_ages").val('').trigger("chosen:updated");
                geocoder.reset();
                geocoder.blur();
            }
        }

        function clearMarkers() {
            var markers = [];
            map.eachLayer(function(layer) {
                if(layer.options.draggable) {
                    markers.push(layer);
                    bindDragToLatLng(layer);
                    map.setView(layer.getLatLng(), 15);
                }
            });
            if(markers.length > 1) {
                map.removeLayer(markers[0]);
            }
        }

        geocoder.on('select', function (e) {
            updateFormFields(e.feature);
            clearMarkers();
            toggleMapFields(false);
            $.ajax({
                url: '<%= site_desc_user_program_items_path %>',
                method: 'GET',
                data: {
                    place_uid: e.feature.properties.id
                }
            });
        });
        geocoder.on('results', function (e) {
            if(e.results.features) {
                if (e.results.features.length === 0) {
                    $("#item_map").find(".leaflet-pelias-message")
                        .html('<em class="pr text-sm">Aucun résultat pour cette recherche.</em><button id="add_new_place" class="btn btn-labeled btn-default btn-sm"><i class="fa fa-plus pr-sm"></i>Ajouter un lieu</button>');
                } else {
                    e.results.features.splice(0);
                    var list = $("#item_map").find(".leaflet-pelias-results > .leaflet-pelias-list");
                    list.before('<div class="leaflet-pelias-message"><em class="pr text-sm">Le lieu ne figure pas dans la liste ?</em><button id="add_new_place" class="btn btn-labeled btn-default btn-sm"><i class="fa fa-plus pr-sm"></i>Ajouter un lieu</button></div>');
                    list.find("li.leaflet-pelias-result").each(function() {
                        var txt = $(this).text(), prevTxt = $(this).prev().text();
                        if (txt.length > prevTxt.length) {
                            if (txt.includes(prevTxt.split(',')[0]) && txt.includes(prevTxt.split(',')[1])) {
                                $(this).prev().hide();
                                // console.log('hiding ' + prevTxt);
                            }
                        } else {
                            if (prevTxt.includes(txt.split(',')[0]) && prevTxt.includes(txt.split(',')[1])) {
                                $(this).hide();
                                // console.log('hiding ' + txt);
                            }
                        }
                    })
                }
                $("#add_new_place").click(function () {
                    toggleMapFields(true);
                    updateMarker(map, mapCenter[0], mapCenter[1]);
                });
            }
        });
        geocoder.addTo(map);

        $("#program_item_main_lat, #program_item_main_lng").focusout(function() {
            var newLat = $("#program_item_main_lat").val();
            var newLng = $("#program_item_main_lng").val();
            if(newLat && newLng) {
                updateMarker(map, newLat, newLng);
            }
        });
        <% end %>
        return map;
    }

    L.Marker = L.Marker.extend({
        options: {
            icon: L.divIcon({html: '<i class="fa fa-map-marker"></i>', iconSize: [20, 32], iconAnchor: [10, 32],
                popupAnchor: [0, -28]})
        }
    });

    function toggleDisplay(selector, val) {
        var elt = $("#" + selector).find("input:checked");
        var descElt = $("." + selector);
        if(elt.val() && elt.val() === val) {
            descElt.show();
        } else {
            descElt.hide();
            descElt.find("textarea").val('');
        }
    }

    function setUpToggle(selector, val) {
        $("#" + selector).find("input").change(function() {
            toggleDisplay(selector, val);
        });
    }

    function toggleBuildingFields() {
        var selected = $("#item_types").find("input[type=radio]:checked").val();
        if(selected == '<%= ITEM_VISITE %>') {
            $("#building_fields").show();
        } else if(selected == '<%= ITEM_EXPOSITION %>') {
            $("#building_fields").show();
            $("#building_fields").find(".form-group:first-child").hide();
        } else {
            $("#building_fields").hide();
        }
    }

    function displaySpinner() {
        var modalWindow = $("#modal_window");
        modalWindow.find("#modal_title").html("Enregistrement en cours");
        modalWindow.find("#modal_body").html(
            '<div class="panel panel-flat">' +
              '<div class="panel-body whirl traditional bg-white">' +
                '<p class="pre pt-lg text-center">Veuillez patienter, votre saisie est en cours d\'enregistrement.</p>' +
              '</div>' +
            '</div>');
        modalWindow.find("#modal_footer").html('<button id="close_spinner" type="button" class="btn btn-inverse">Fermer</button>');
        modalWindow.modal();
        $("#close_spinner").click(function() {
            modalWindow.modal("hide");
            return false;
        });
    }

    $(function() {
        var map = initMap('item_map', 8, 6);
        <% unless @item.main_lat.blank? || @item.main_lng.blank? %>
          <% if readonly %>
              L.marker([<%= @item.main_lat %>, <%= @item.main_lng %>]).addTo(map);
          <% else %>
              var marker = L.marker([<%= @item.main_lat %>, <%= @item.main_lng %>], {draggable: true}).addTo(map);
              bindDragToLatLng(marker);
          <% end %>
        <% end %>
        $(".chosen-select.no-max").chosen({width: '95%'});
        $("#item_types").find("input[type=radio]").change(function() {
            toggleBuildingFields();
            $.ajax({
                url: '<%= update_form_path %>',
                method: 'GET',
                data: {
                    item_type: $(this).val()
                }
            });
        });
        setUpToggle("free_toggle", "false");
        toggleDisplay("free_toggle", "false");
        setUpToggle("booking_toggle", "true");
        toggleDisplay("booking_toggle", "true");
        toggleBuildingFields();

        <% if @town %>
          setTownValue('<%= @town.insee_code %>', '<%= @town.label %>');
        <% end %>

        <% if current_moderator && (@item.draft? || @item.pending?) && @item.user_id %>
          setUserValue('<%= @item.user_id %>', '<%= @item.user.full_name %>');
        <% end %>

        function injectTrim(handler) {
            return function (element, event) {
                if (element.tagName === "TEXTAREA" || (element.tagName === "INPUT")) {
                    element.value = $.trim(element.value);
                }
                return handler.call(this, element, event);
            };
        }

        loadOpenings();

        $.extend($.validator.messages, {
            required: "champ requis",
            email: "adresse email invalide",
            url: "adresse web invalide",
            number: "<i class='fa fa-warning'></i>",
            min: "<i class='fa fa-warning'></i>",
            max: "<i class='fa fa-warning'></i>",
            maxlength: "255 caractères maximum"
        });

        $.validator.addMethod('opening_presence', function(value, element) {
            return $(".item_opening").filter(function() {return $(this).val();}).length > 0;
        });

        $.validator.addMethod('accept_pictures', function(value, element) {
            return $("fieldset.item_photos").find("fieldset.nested-fields:visible").length === 0 || value;
        });

        $("#program_item_form").validate({
            errorPlacement: function errorPlacement(error, element) {
                if(element.is("input[type=checkbox]")) {
                    element.before(error);
                } else if(element.is(':hidden')) {
                    if(element.attr("id") === 'program_item_status') {
                      $("legend.openings").append(error);
                    }
                } else {
                    element.after(error);
                }
            },
            ignore: [],
            onfocusout: injectTrim($.validator.defaults.onfocusout),
            errorElement: "small",
            rules: {
                "program_item[accessibility][]": {required: true, minlength: 1},
                "program_item[status]": {opening_presence: true},
                "program_item[accept_pictures]": {accept_pictures: true},
                "program_item[main_lat]": {number: true, min: 44.21764696919354, max: 46.63057868059483},
                "program_item[main_lng]": {number: true, min: 4.075927734375, max: 7.223510742187499},
                "program_item[summary]": {maxlength: 254}
            },
            messages: {
                "program_item[accessibility][]": "champ requis",
                "program_item[status]": "veuillez saisir au moins une période d'ouverture",
                "program_item[accept_pictures]": "veuillez valider les conditions d'utilisations des photos"
            },
            submitHandler: function(form) {
                displaySpinner();
                form.submit();
            },
            invalidHandler: function(form, validator) {
                $.notify("Merci de renseigner tous les champs requis", "danger");
            }
        });

    });
</script>
