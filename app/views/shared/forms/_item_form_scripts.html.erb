<script>
    var selectTown = $("select.select_town").select2({
        language: "fr",
        minimumInputLength: 2,
        ajax: {
            url: "<%= towns_user_account_path %>",
            delay: 500,
            data: function (params) {
                var query = {
                    pattern: encodeURIComponent(params.term),
                    page: params.page
                };
                return query;
            },
            processResults: function (data) {
                return {
                    results: data.towns
                };
            }
        }
    });

    function setTownValue(value, label) {
        $("select.select_town").append('<option value="' + value + '">' + label + '</option>');
        selectTown.val(value).trigger('change');
    }

    function updateFormFields(feature) {
        $("#program_item_main_place").val(feature.properties.name);
        $("#program_item_main_address").val([feature.properties.housenumber, feature.properties.street].join(' ').trim());
        var postalCodeId = (feature.properties.postalcode_gid && feature.properties.postalcode_gid.split(':').length == 3) ? feature.properties.postalcode_gid.split(':')[2] : null;
        if(postalCodeId) {
          setTownValue(postalCodeId, feature.properties.locality);
        }
        $("#program_item_main_lat").val(feature.geometry.coordinates[1]);
        $("#program_item_main_lng").val(feature.geometry.coordinates[0]);
    }

    function updateMarker(map, lat, lng) {
        var prevLayers = [];
        map.eachLayer(function(layer) {
            if(layer.options.draggable) {
                prevLayers.push(layer);
            }
        });
        for(var i = 0; i < prevLayers.length; i++) {
            map.removeLayer(prevLayers[i]);
        }
        var marker = L.marker([lat, lng], {draggable: true});
        marker.addTo(map);
        map.setView([lat, lng], 15);
        bindDragToLatLng(marker);
    }

    function setStatus(status) {
        $('#program_item_status').val(status);
        $('#program_item_author').val('<%= current_user ? current_user.full_name : current_moderator.full_name %>');
    }

    function bindDragToLatLng(marker) {
        marker.on('dragend', function(e) {
            var newLatLng = e.target._latlng;
            $("#program_item_main_lat").val(newLatLng.lat);
            $("#program_item_main_lat").removeClass("error");
            $("#program_item_main_lng").val(newLatLng.lng);
            $("#program_item_main_lng").removeClass("error");
        });
    }

    function initMap(container, zoom, minZoom) {
        var map = L.map(container, {zoomControl: false, zoom: zoom, minZoom: minZoom, scrollWheelZoom: false}).setView([45.740410, 4.816417]);
        new L.Control.Zoom({ position: 'bottomleft' }).addTo(map);
        L.tileLayer('https://api.mapbox.com/v4/mapbox.streets/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiamVhbmJhcHRpc3RldmlsYWluIiwiYSI6ImZiMTJmMDdjODI5NDRiYTcyMDgzNGJmOTA5NjU0NDg1In0.b6l-11X_ZtS_83CsFu-v9Q', {
            attribution: '&copy; Mapbox &copy; OpenStreetMap',
            detectRetina: true
        }).addTo(map);

        <% unless readonly %>
        var geocoderOptions = {
            url: 'https://places.apidae.net',
            layers: ['venue', 'address', 'street'],
            position: 'topleft',
            expanded: true,
            overrideBbox: true,
            fullWidth: false,
            markers: {draggable: true},
            textStrings: {
                INPUT_PLACEHOLDER: "Saisir le nom du lieu ou son adresse",
                INPUT_TITLE_ATTRIBUTE: 'Rechercher',
                RESET_TITLE_ATTRIBUTE: 'Réinitialiser',
                NO_RESULTS: 'Aucun résultat',
                ERROR_403: 'Autorisation requise',
                ERROR_404: 'Le service de recherche est temporairement indisponible',
                ERROR_408: 'Le service de recherche est temporairement indisponible',
                ERROR_429: 'Le service de recherche est temporairement indisponible',
                ERROR_500: 'Le service de recherche est temporairement indisponible',
                ERROR_502: 'Le service de recherche est temporairement indisponible',
                ERROR_DEFAULT: 'Le service de recherche est temporairement indisponible'
            }
        };
        var geocoder = L.control.geocoder('mapzen-NY5Wumy', geocoderOptions);

        function toggleMapFields(newPlace) {
            $("#map_fields").show();
            if(newPlace) {
                updateFormFields({properties:{}, geometry:{coordinates:[4.816417, 45.740410]}});
                $("#program_item_main_transports").val('');
                $("#program_item_main_town_insee_code").val('').trigger('change');
                $("#program_item_building_types").val('').trigger("chosen:updated");
                $("#program_item_building_ages").val('').trigger("chosen:updated");
                geocoder.reset();
                geocoder.blur();
            }
        }

        function clearMarkers() {
            var markers = [];
            map.eachLayer(function(layer) {
                if(layer.options.draggable) {
                    markers.push(layer);
                    bindDragToLatLng(layer);
                    map.setView(layer.getLatLng(), 15);
                }
            });
            if(markers.length > 1) {
                map.removeLayer(markers[0]);
            }
        }

        geocoder.on('select', function (e) {
            updateFormFields(e.feature);
            clearMarkers();
            toggleMapFields(false);
            $.ajax({
                url: '<%= site_desc_user_program_items_path %>',
                method: 'GET',
                data: {
                    place_uid: e.feature.properties.id
                }
            });
        });
        geocoder.on('results', function (e) {
            if(e.results.features) {
                if (e.results.features.length == 0) {
                    $("#item_map").find(".leaflet-pelias-message")
                        .html('<em class="pr text-sm">Aucun résultat pour cette recherche.</em><button id="add_new_place" class="btn btn-labeled btn-default btn-sm"><i class="fa fa-plus pr-sm"></i>Ajouter un lieu</button>');
                } else {
                    $("#item_map").find(".leaflet-pelias-results > .leaflet-pelias-list")
                        .before('<div class="leaflet-pelias-message"><em class="pr text-sm">Le lieu ne figure pas dans la liste ?</em><button id="add_new_place" class="btn btn-labeled btn-default btn-sm"><i class="fa fa-plus pr-sm"></i>Ajouter un lieu</button></div>');
                }
                $("#add_new_place").click(function () {
                    toggleMapFields(true);
                    updateMarker(map, 45.740410, 4.816417);
                });
            }
        });
        geocoder.addTo(map);

        $("#program_item_main_lat, #program_item_main_lng").focusout(function() {
            var newLat = $("#program_item_main_lat").val();
            var newLng = $("#program_item_main_lng").val();
            if(newLat && newLng) {
                updateMarker(map, newLat, newLng);
            }
        });
        <% end %>
        return map;
    }

    var pickerTooltips = {
        today: "Aujourd'hui",
        clear: "Supprimer",
        close: "Fermer",
        selectMonth: "Sélectionner un mois",
        prevMonth: "Mois précédent",
        nextMonth: "Mois suivant",
        selectYear: "Sélectionner une année",
        prevYear: "Année précédent",
        nextYear: "Année suivant",
        selectDecade: "Sélectionner une décennie",
        prevDecade: "Décennie précédente",
        nextDecade: "Décennie suivante",
        prevCentury: "Siècle précédent",
        nextCentury: 'Siècle suivant'
    };

    function pickerIcons(clearClass) {
        return {
            time: 'fa fa-clock-o',
            date: 'fa fa-calendar',
            up: 'fa fa-chevron-up',
            down: 'fa fa-chevron-down',
            previous: 'fa fa-chevron-left',
            next: 'fa fa-chevron-right',
            today: 'fa fa-crosshairs',
            clear: 'fa text-bold icon-trash clear_picker ' + clearClass
        };
    }

    function displayAsEmpty(picker, date) {
        if(!date) {
            picker.find("span.timepicker-hour").text('--');
            picker.find("span.timepicker-minute").text('--');
        }
    }

    function initDateTimePicker(wrapperElt) {
        var datepicker = $("#" + wrapperElt).find(".datepicker");
        datepicker.datetimepicker({
            locale: 'fr',
            viewDate: '2018-09-15',
            minDate: '2018-09-14',
            maxDate: '2018-09-17',
            defaultDate: '2018-09-15',
            useCurrent: false,
            format: 'YYYY-MM-DD HH:mm',
            sideBySide: true,
            inline: true,
            showClear: true,
            toolbarPlacement: 'bottom',
            icons: pickerIcons(wrapperElt),
            tooltips: pickerTooltips
        });
        datepicker.on('dp.change', function(evt) {
            displayAsEmpty(datepicker, evt.date);
        });
        displayAsEmpty(datepicker, datepicker.find("input.hidden").val());
    }

    function initTimePicker(wrapperElt) {
        var timepicker = $("#" + wrapperElt).find(".datetimepicker");
        timepicker.datetimepicker({
            locale: 'fr',
            viewDate: '2018-09-15',
            defaultDate: '2018-09-15 00:00',
            useCurrent: false,
            format: 'HH:mm',
            sideBySide: true,
            inline: true,
            showClear: true,
            toolbarPlacement: 'bottom',
            icons: pickerIcons(wrapperElt),
            tooltips: pickerTooltips
        });
        timepicker.on('dp.change', function(evt) {
            displayAsEmpty(timepicker, evt.date);
        });
        displayAsEmpty(timepicker, timepicker.find("input.hidden").val());
    }

    L.Marker = L.Marker.extend({
        options: {
            icon: L.divIcon({html: '<i class="fa fa-map-marker"></i>', iconSize: [20, 32], iconAnchor: [10, 32],
                popupAnchor: [0, -28]})
        }
    });

    function parseTempIdentifier(elt) {
        return elt.find("textarea").attr("id").split("program_item_item_openings_attributes_")[1].split("_")[0];
    }

    function bindOpeningsActions() {
        $(".item_openings").find(".nested-fields").each(function() {
            var src = $(this);
            var identifier = parseTempIdentifier($(this));
            var newIdentifier = new Date().getTime();

            $(this).find("a.clone_opening").click(function() {
                var srcHtml = src.clone().wrap('<p/>').parent().html();
                var cloneHtml = srcHtml.replace(new RegExp('_' + identifier + '_', 'g'), '_' + newIdentifier + '_')
                    .replace(new RegExp('\\[' + identifier + '\\]', 'g'), '[' + newIdentifier + ']');
                $(cloneHtml).insertAfter(src);
                bindOpeningsActions();
            });
            $(this).find("a.edit_opening").click(function() {
                displayOpeningModal(identifier);
            })
        });
    }

    function displayOpeningModal(identifier, clearOnDismiss) {
        var openingId = "program_item_item_openings_attributes_" + identifier;
        var modal = $("#lg_modal");
        modal.find("#lg_modal_title").html("Modifier la période d'ouverture");
        modal.find("#lg_modal_body").html("<%= j(render 'shared/forms/opening_form', opening_form_path: opening_form_path) %>");
        modal.modal();
        modal.off('hide.bs.modal');
        modal.drags({handle: '.modal-header'});
        $("#starts_at").val($("#" + openingId + "_starts_at").val() ? moment($("#" + openingId + "_starts_at").val()).format('YYYY-MM-DD HH:mm') : '');
        $("#ends_at").val($("#" + openingId + "_ends_at").val() ? moment($("#" + openingId + "_ends_at").val()).format('YYYY-MM-DD HH:mm') : '');
        var duration = $("#" + openingId + "_duration").val();
        $("#duration").val(duration ? moment(duration * 1000).utc().format('HH:mm') : '');
        var frequency = $("#" + openingId + "_frequency").val();
        $("#frequency").val(frequency ? moment(frequency * 1000).utc().format('HH:mm') : '');
        $("#prefix").val(openingId);
        initDateTimePicker("edit_start_date");
        initDateTimePicker("edit_end_date");
        initTimePicker("edit_duration");
        initTimePicker("edit_frequency");
        if(clearOnDismiss) {
            $("#lg_modal").on('hide.bs.modal', function() {
                var startsAt = $("#" + $(this).find("#prefix").val() + "_starts_at");
                if(!startsAt.val()) {
                    startsAt.parents("fieldset.nested-fields")[0].remove();
                }
            });
        }
        $("#edit_opening_form").submit(function(evt) {
            var startsAt = $("#starts_at").val();
            var endsAt = $("#ends_at").val();
            if(startsAt) {
                if(endsAt && startsAt > endsAt) {
                    $("#edit_opening_error").html('<p class="text-center text-bold">Veuillez saisir une date de fin postérieure à la date de début.</p>');
                    return false;
                } else {
                    $("#edit_opening_error").html("");
                    return true;
                }
            } else {
                $("#edit_opening_error").html('<p class="text-center text-bold">Veuillez saisir une date de début</p>');
                return false;
            }
        })
    }

    function toggleDisplay(selector, val) {
        var elt = $("#" + selector).find("input:checked");
        var descElt = $("." + selector);
        if(elt.val() && elt.val() === val) {
            descElt.show();
        } else {
            descElt.hide();
            descElt.find("textarea").val('');
        }
    }

    function setUpToggle(selector, val) {
        $("#" + selector).find("input").change(function() {
            toggleDisplay(selector, val);
        });
    }

    function toggleBuildingFields() {
        var selected = $("#item_types").find("input[type=radio]:checked").val();
        if(selected == '<%= ITEM_VISITE %>') {
            $("#building_fields").show();
        } else if(selected == '<%= ITEM_EXPOSITION %>') {
            $("#building_fields").show();
            $("#building_fields").find(".form-group:first-child").hide();
        } else {
            $("#building_fields").hide();
        }
    }

    function displaySpinner() {
        var modalWindow = $("#modal_window");
        modalWindow.find("#modal_title").html("Enregistrement en cours");
        modalWindow.find("#modal_body").html(
            '<div class="panel panel-flat">' +
              '<div class="panel-body whirl traditional bg-white">' +
                '<p class="pre pt-lg text-center">Veuillez patienter, votre saisie est en cours d\'enregistrement.</p>' +
              '</div>' +
            '</div>');
        modalWindow.find("#modal_footer").html('<button id="close_spinner" type="button" class="btn btn-inverse">Fermer</button>');
        modalWindow.modal();
        $("#close_spinner").click(function() {
            modalWindow.modal("hide");
            return false;
        });
    }

    $(function() {
        bindOpeningsActions();
        var map = initMap('item_map', 8, 6);
        <% unless @item.main_lat.blank? || @item.main_lng.blank? %>
          <% if readonly %>
              L.marker([<%= @item.main_lat %>, <%= @item.main_lng %>]).addTo(map);
          <% else %>
              var marker = L.marker([<%= @item.main_lat %>, <%= @item.main_lng %>], {draggable: true}).addTo(map);
              bindDragToLatLng(marker);
          <% end %>
        <% end %>
        $(".chosen-select.no-max").chosen({width: '95%'});
        $(".item_openings").on("cocoon:after-insert", function (e, elt) {
            var tmpIdentifier = parseTempIdentifier($(elt));
            bindOpeningsActions();
            displayOpeningModal(tmpIdentifier, true);
        });
        $("#item_types").find("input[type=radio]").change(function() {
            toggleBuildingFields();
            $.ajax({
                url: '<%= update_form_path %>',
                method: 'GET',
                data: {
                    item_type: $(this).val()
                }
            });
        });
        setUpToggle("free_toggle", "false");
        toggleDisplay("free_toggle", "false");
        setUpToggle("booking_toggle", "true");
        toggleDisplay("booking_toggle", "true");
        toggleBuildingFields();

        <% if @town %>
          setTownValue('<%= @town.insee_code %>', '<%= @town.label %>');
        <% end %>

        function injectTrim(handler) {
            return function (element, event) {
                if (element.tagName === "TEXTAREA" || (element.tagName === "INPUT")) {
                    element.value = $.trim(element.value);
                }
                return handler.call(this, element, event);
            };
        }

        $.extend($.validator.messages, {
            required: "champ requis",
            email: "adresse email invalide",
            url: "adresse web invalide"
        });

        $.validator.addMethod('opening_presence', function(value, element) {
            return $("fieldset.opening").length > 0;
        }, "champ requis");

        $.validator.addMethod('accept_pictures', function(value, element) {
            return $("fieldset.item_photos").find("fieldset.nested-fields:visible").length == 0 || value;
        });

        $("#program_item_form").validate({
            errorPlacement: function errorPlacement(error, element) {
                if(element.is("input[type=checkbox]")) {
                    element.before(error);
                } else if(element.is(':hidden')) {
                    $("legend.openings").append(error);
                } else {
                    element.after(error);
                }
            },
            ignore: [],
            onfocusout: injectTrim($.validator.defaults.onfocusout),
            errorElement: "small",
            rules: {
                "program_item[accessibility][]": {required: true, minlength: 1},
                "program_item[status]": {opening_presence: true},
                "program_item[accept_pictures]": {accept_pictures: true}
            },
            messages: {
                "program_item[accessibility][]": "champ requis",
                "program_item[status]": "veuillez saisir au moins une période d'ouverture",
                "program_item[accept_pictures]": "veuillez valider les conditions d'utilisations des photos"
            },
            submitHandler: function(form) {
                displaySpinner();
                form.submit();
            },
            invalidHandler: function(form, validator) {
                $.notify("Merci de renseigner tous les champs requis", "danger");
            }
        });

    });
</script>
