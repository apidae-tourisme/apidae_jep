<script type="text/javascript" src="<%= Rails.application.config.apidate_static_url %>/inline.bundle.js"></script>
<script type="text/javascript" src="<%= Rails.application.config.apidate_static_url %>/polyfills.bundle.js"></script>
<script type="text/javascript" src="<%= Rails.application.config.apidate_static_url %>/main.bundle.js"></script>
<script type="text/javascript">
    function displayOpeningsForm(date, externalId, externalRef, readonly) {
        if (readonly === 'disabled') {
            displayOpeningsDetails(date, externalId);
        } else {
            openApidateForm(
                {
                    title: 'Journées du patrimoine 2020',
                    subtitle: moment(date).format('dddd D MMMM YYYY'),
                    type: 'apidae_period',
                    externalId: externalId,
                    externalType: 'FETE_ET_MANIFESTATION',
                    externalRef: externalRef,
                    startDate: date,
                    endDate: date,
                    closingDays: [],
                    userId: <% if @item.user && @item.user.uid %><%= @item.user.uid %><% else %>'<%= @item.user ? "JEP-#{@item.user.id}" : "JEP-USER" %>'<% end %>,
                    onLoad: function() {
                        unselectWeekdays();
                        $("apidate-time-schedule .modal-body > div > div:last-child > button").click(function() {
                            setTimeout(unselectWeekdays, 500);
                        });
                    },
                    onSubmit: function() {
                        $("#opening_" + date).val(externalId);
                        loadOpenings();
                    },
                    onDismiss: function() {
                        $("#opening_" + date).val(externalId);
                        loadOpenings();
                    }
                }
            );
        }
    }

    function displayOpeningsDetails(date, externalId) {
        openApidateDisplay({
            title: 'Journées du patrimoine 2020',
            subtitle: moment(date).format('dddd D MMMM YYYY'),
            type: 'apidae_period',
            externalId: externalId,
            onLoad: function() {
              $("apidate-details").find(".time-period > .card-body").each(function() {
                  $(this).text($(this).text().replace(" tous les jours", ""));
              })
            }
        });
    //    $.map($("apidate-time-period").find(".card.bg-light:last-child"), function(elt) {return $(elt).text()}).join("\n")
    }

    // Note : workaround to unselect weekdays, to fix automatic text generation - to replace with a "single day" init option on MH side
    function unselectWeekdays() {
        $("apidate-time-period .weekdays + div > button:last-child").click();
    }

    // Note : singleorigin param is used to prevent Apache / CouchDB from setting multiple allow-origin headers
    function loadOpenings() {
        var values = $.map($(".item_opening"), function(elt) {return $(elt).val();}).filter(function(val) {return val;});
        $.ajax({
            url: '<%= Rails.application.config.apidate_api_url %>/apidae_period?singleorigin=true&ids=["' + values.join('","') + '"]',
            method: 'GET',
            contentType: 'application/json',
            success: function(openings) {
                if (openings) {
                    $("[id^='edit_opening_']").each(function() {
                        $(this).find("em").text("Aucun horaire saisi.");
                    });
                    for (var i = 0; i < openings.length; i++) {
                        if (openings[i].startDate === openings[i].endDate) {
                            var btn = $("#edit_opening_" + openings[i].startDate);
                            if (btn.length && openings[i].timePeriods.length) {
                                btn.find("em").text($.map(openings[i].timePeriods, function(tp) {return timePeriod(tp);}).join("\n"));
                            }
                        }
                    }
                }
            },
            error: function(error) {
                console.log('openings loading failed : ' + error);
            }
        });
    }

    var types = {
        opening: {singular: 'Ouverture', plural: 'Ouverture'},
        last_entry: {singular: 'Dernière entrée', plural: 'Dernières entrées'},
        ceremony: {singular: 'Cérémonie', plural: 'Cérémonies'},
        guided_tour: {singular: 'Visite guidée', plural: 'Visites guidées'},
        representation: {singular: 'Représentation', plural: 'Représentations'}
    };

    function timePeriod(tp) {
        var type = types[tp.type];
        var timeFramesText = textJoin(tp.timeFrames.map(function(tf) {return timeFrame(tf);}));
        var singleTimeFrame = tp.timeFrames.length === 1
            && (!tp.timeFrames[0].endTime || !tp.timeFrames[0].endTime.hour)
            && (!tp.timeFrames[0].recurrence || !tp.timeFrames[0].recurrence.hour);
        return [singleTimeFrame ? type.singular : type.plural, timeFramesText].join(" ") + ".";
    }

    function timeFrame(tf) {
        var txt = "";
        if (tf.startTime != null) {
            if (tf.recurrence != null) {
                txt += "toutes les " + duration(tf.recurrence) + " ";
            }
            if (tf.endTime != null) {
                txt += "de " + tf.startTime.replace(':', 'h') + " à " + tf.endTime.replace(':', 'h');
            } else {
                txt += (tf.recurrence ? "à partir de " : "à ") + tf.startTime.replace(':', 'h');
            }
        }
        return txt;
    }

    function textJoin(textFields) {
        var validFields = textFields.filter(function(f) {return f.length > 0;});
        if (validFields.length > 0) {
            var last = validFields.pop();
            return validFields.length > 0 ? (validFields.join(", ") + " et " + last) : last;
        } else {
            return "";
        }
    }

    function duration(d) {
        return (d.indexOf('00') === 0 ? '' : (+d.split(':')[0] + 'h')) + (d.indexOf('00') > 0 ? '' : +d.split(':')[1] + "mins");
    }
</script>